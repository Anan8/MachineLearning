    inline void twitter::printValueTree( Json::Value &value, const std::string &path ) const
    {
        switch ( value.type() ) {
            
            case Json::nullValue:
                printf("%s=null\n", path.c_str() );
                break;
            
            case Json::intValue:
                printf("%s=%d\n", path.c_str(), value.asInt() );
                break;
            
            case Json::uintValue:
                printf("%s=%u\n", path.c_str(), value.asUInt() );
                break;
            
            case Json::realValue:
                printf("%s=%.16g\n", path.c_str(), value.asDouble() );
                break;
            
            case Json::stringValue:
                printf("%s=\"%s\"\n", path.c_str(), value.asString().c_str() );
                break;
            
            case Json::booleanValue:
                printf("%s=%s\n", path.c_str(), value.asBool() ? "true" : "false" );
                break;
                
            case Json::arrayValue:
                printf("%s=[]\n", path.c_str() );
                for ( unsigned int index =0; index < value.size(); ++index )
                {
                    static char buffer[16];
                    sprintf( buffer, "[%d]", index );
                    printValueTree(value[index], path + buffer );
                }
                break;
                
            case Json::objectValue:
                printf("%s={}\n", path.c_str() );
                Json::Value::Members members( value.getMemberNames() );
                std::sort( members.begin(), members.end() );
                std::string suffix = *(path.end()-1) == '.' ? "" : ".";
                for ( Json::Value::Members::iterator it = members.begin(); 
                     it != members.end(); 
                     ++it )
                {
                    const std::string &name = *it;
                    printValueTree(value[name], path + suffix + name );
                }
                break;
        }
    }



    
    // ===== Gradient ======
    /*
    boost::multi_array<double, 2> x;
    boost::multi_array<double, 2> y;
    boost::multi_array<double, 2> target;
    
    func::gradientdescent<double, 2> gd("a*x^3 + b*y^4");
    
    
    gd.setErrorFunction("a, b");
    
    gd.setOptimizeVar("a", 9);
    gd.setOptimizeVar("b", 2, 5);
    
    gd.setStaticVar("x", x);
    gd.setStaticVar("y", y);
    gd.setStaticVar("target", target);
    
    gd.optimize(1, 0.1);
    */
            
    // ==== LLE ====
    /*
    ublas::matrix<double> data = o.readMatrix<double>("/pcadata", H5::PredType::NATIVE_DOUBLE); 
    
    dist::euclid<double> d;
    nd::knn<double> k(d, 12);
    ndim::lle<double> l(k,2);
    
    tl::files::hdf f("lle.hdf5", true);
    f.write<double>( "/data",  l.map(data), H5::PredType::NATIVE_DOUBLE );  
    */
