# -*- coding: utf-8 -*-
import os
import urllib2
import re
import shutil
import subprocess
Import("*")


#=== help function ===================================================================================================================
def runsyscmd(cmd, env) :
    ret = subprocess.call( cmd, shell=True )
    if ret <> 0 and not(env["skipbuilderror"]) :
        print "\nan error occurred during building"
        res = ""
        while res != "a" and res != "c" :
            res = raw_input("(a)bort or (c)ontinue: ")
            if res == "a" :
                sys.exit(1)
        
                        
def downloadfile(url, file)  :
    if os.path.isfile(file) :
        return
                
    target = open( file, "w" )
    f = urllib2.urlopen(url)
    target.write(f.read())
    target.close()
    f.close()
    
    
def clearbuilddir(target, source, env) :
    clearlist = []
    for i in os.listdir("install") :
        if os.path.isfile(os.path.join("install", i)) :
            continue
        if i <> "build" :
            clearlist.append(i)
    
    for i in clearlist :
        for pathentry in os.walk(os.path.join("install", i), False):
            for dir in pathentry[1]:
                path = os.path.join(pathentry[0], dir)
                if os.path.islink(path):
                    os.unlink(path)
                else:
                    os.rmdir(path)

            for file in pathentry[2]:
                path = os.path.join(pathentry[0], file)
                os.unlink(path)
       
        os.removedirs(os.path.join("install", i))
    
    return []



#=== download packages ===============================================================================================================
def download_boost(target, source, env)  :
    # read download path of the Boost (latest version)
    f = urllib2.urlopen("http://www.boost.org/users/download/")
    html = f.read()
    f.close()
    
    found = re.search("<a href=\"http://sourceforge.net/projects/boost/files/(.*)\">Download</a>", html)
    if found == None :
        raise RuntimeError("Boost Download URL not found")
        
    downloadurl = found.group(0)
    downloadurl = downloadurl.replace("<a href=\"", "")
    downloadurl = downloadurl.replace("\">Download</a>", "")
    
    # read url of the tar.bz2
    f = urllib2.urlopen(downloadurl)
    html = f.read()
    f.close()

    found = re.search("<a href=\"http://sourceforge.net/projects/boost/files/boost(.*).tar.bz2/download", html)
    if found == None :
        raise RuntimeError("Boost Download URL not found")

    downloadurl = found.group(0)
    downloadurl = downloadurl.replace("<a href=\"", "")

    downloadfile(downloadurl, os.path.join("install", "boost.tar.bz2"))
    return []


def download_hdf(target, source, env) :
    # read download path of the HDF
    f = urllib2.urlopen("http://www.hdfgroup.org/ftp/HDF5/current/src/")
    html = f.read()
    f.close()
    
    found = re.search("<a href=\"(.*)tar.bz2\">", html)
    if found == None :
        raise RuntimeError("HDF Download URL not found")
    downloadurl = found.group(0)

    downloadurl = downloadurl.replace("<a href=\"", "")
    downloadurl = downloadurl.replace("\">", "")
    downloadurl = "http://www.hdfgroup.org/ftp/HDF5/current/src/" + downloadurl

    # download the package
    downloadfile(downloadurl, os.path.join("install", "hdf.tar.bz2"))
    return []


def download_atlaslapack(target, source, env) :
    # read download path of the LAPack (latest version)
    f = urllib2.urlopen("http://www.netlib.org/lapack/")
    html = f.read()
    f.close()
    
    found = re.search("<a href=\"http://www.netlib.org/lapack/(.*)tgz\">", html)
    if found == None :
        raise RuntimeError("LAPack Download URL not found")
        
    downloadurl = found.group(0)
    downloadurl = downloadurl.replace("<a href=\"", "")
    downloadurl = downloadurl.replace("\">", "")
    
    downloadfile(downloadurl, os.path.join("install", "lapack.tgz"))
    downloadfile("http://sourceforge.net/projects/math-atlas/files/latest/download?source=files", os.path.join("install", "atlas.tar.bz2"))
    return []


def download_ginaccln(target, source, env) :
    # read download path of the GiNaC (latest version)
    f = urllib2.urlopen("http://www.ginac.de/Download.html")
    html = f.read()
    f.close()
    
    found = re.search("<a href=\"http://www.ginac.de/(.*).tar.bz2\">this link</a>", html)
    if found == None :
        print "GiNaC Download URL not found"
        sys.exit(1)
    downloadurl = found.group(0)
    downloadurl = downloadurl.replace("<a href=\"", "")
    downloadurl = downloadurl.replace("\">this link</a>", "")
    
    downloadfile(downloadurl, os.path.join("install", "ginac.tar.bz2"))

    
    # read download path of the CLN (latest version)
    f = urllib2.urlopen("http://www.ginac.de/CLN/")
    html = f.read()
    f.close()
    
    found = re.search("<a href=\"(.*).tar.bz2\">from here</a>", html)
    if found == None :
        print "CLN Download URL not found"
        sys.exit(1)
    downloadurl = found.group(0)
    downloadurl = downloadurl.replace("<a href=\"", "")
    downloadurl = "http://www.ginac.de/CLN/" + downloadurl.replace("\">from here</a>", "")
    
    downloadfile(downloadurl, os.path.join("install", "cln.tar.bz2"))
    return []


def download_jsoncpp(target, source, env) :
    downloadfile("http://sourceforge.net/projects/jsoncpp/files/latest/download?source=files", os.path.join("install", "jsoncpp.tar.gz"))
    return []




#=== target structure ================================================================================================================
skiplist = str(env["skipbuild"]).split(",")
if ("librarybuild" in COMMAND_LINE_TARGETS) and ("all" in skiplist) :
    raise RuntimeError("nothing to build")

#build into a temp dir
lst = []
lst.append( env.Command("mkinstalldir", "", Mkdir("install")) )
lst.append( env.Command("mkbuilddir", "", Mkdir(os.path.join("install", "build"))) )

#clear install directories before compiling
lst.append( env.Command("cleanbeforebuilddir", "", clearbuilddir) )

#download LAPack & ATLAS, extract & install
if not("atlas" in skiplist) :
    lst.append( env.Command("downloadlapackatlas", "", download_atlaslapack) )
#    lst.append( env.Command("mkatlasbuilddir", "", Mkdir(os.path.join("install", "atlasbuild"))) )
#    lst.append( env.Command("buildatlaslapack", "", build_atlaslapack) )
#    if env['PLATFORM'].lower() == "posix" or env['PLATFORM'].lower() == "cygwin" :
#        lst.append( env.Command("sonameatlaslapack", "", soname_atlaslapack) )
#    lst.append( env.Command("installatlaslapack", "", install_atlaslapack) )

# download Boost, extract & install
if not("boost" in skiplist) :
    lst.append( env.Command("downloadboost", "", download_boost) )
    lst.append( env.Command("extractboost", "", "tar xfvj "+os.path.join("install", "boost.tar.bz2")+" -C install") )
#    lst.append( env.Command("buildboost", "", build_boost) )

# download HDF, extract & install
if not("hdf" in skiplist) :
    lst.append( env.Command("downloadhdf", "", download_hdf) )
    lst.append( env.Command("extracthdf", "", "tar xfvj "+os.path.join("install", "hdf.tar.bz2")+" -C install") )
#    lst.append( env.Command("buildhdf", "", build_hdf) )

#download GiNaC & CLN, extract & install
if not("ginac" in skiplist) :
    lst.append( env.Command("downloadginaccln", "", download_ginaccln) )
    lst.append( env.Command("extractginac", "", "tar xfvj "+os.path.join("install", "ginac.tar.bz2")+" -C install") )
    lst.append( env.Command("extractcln", "", "tar xfvj "+os.path.join("install", "cln.tar.bz2")+" -C install") )
#    lst.append( env.Command("buildginaccln", "", build_ginaccln) )

#download JSON library, extract & install
if not("json" in skiplist) :
    lst.append( env.Command("downloadjsoncpp", "", download_jsoncpp) )
    lst.append( env.Command("extractjsoncpp", "", "tar xfvz "+os.path.join("install", "jsoncpp.tar.gz")+" -C install") )
#    lst.append( env.Command("buildjsoncpp", "", build_jsoncpp) )

#clear install directories after compiling
#lst.append( env.Command("cleanafterbuilddir", "", clearbuilddir) )

env.Alias("librarybuild", lst)






